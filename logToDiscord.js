const axios = require('axios');
const DISCORD_INFO_WEBHOOK_URL = process.env.DISCORD_INFO_WEBHOOK_URL;
const DISCORD_ERROR_WEBHOOK_URL = process.env.DISCORD_ERROR_WEBHOOK_URL;
const DISCORD_WEBHOOK_URL_BOOKING = process.env.DISCORD_WEBHOOK_URL_BOOKING;
const DISCORD_COURSE_WEBHOOK_URL = process.env.DISCORD_COURSE_WEBHOOK_URL;

// ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Discord ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
const MAX_TITLE_LENGTH = 256;
const MAX_DESCRIPTION_LENGTH = 4096;
const MAX_FOOTER_LENGTH = 2048;

// ‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ URL
const queue = {
    booking: [],
    course: [],
    info: [],
    error: []
};

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let isProcessing = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡πà‡∏á webhook ‡πÅ‡∏•‡∏∞ retry
async function sendWebhook(url, message) {
    try {
        await axios.post(url, { content: message });
    } catch (err) {
        if (err.response?.status === 429) {
            let retryAfter = 5 * 1000; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            const headerRetry = err.response.headers['retry-after'];
            const bodyRetry = err.response.data?.retry_after;

            if (headerRetry) {
                retryAfter = parseFloat(headerRetry) * 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            } else if (bodyRetry) {
                retryAfter = parseFloat(bodyRetry);
            }

            console.warn(`‚è≥ Rate limited. Retrying in ${retryAfter / 1000} seconds...`);
            return retryAfter; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ retry
        } else {
            console.error("‚ùå Error sending to Discord:", err.response?.data || err.message);
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ URL
async function processQueue(urlType) {
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const urlMap = {
        booking: DISCORD_WEBHOOK_URL_BOOKING,
        course: DISCORD_COURSE_WEBHOOK_URL,
        info: DISCORD_INFO_WEBHOOK_URL,
        error: DISCORD_ERROR_WEBHOOK_URL
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    while (queue[urlType].length > 0) {
        const message = queue[urlType].shift(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        const url = urlMap[urlType];

        // ‡∏™‡πà‡∏á webhook
        let retryAfter = await sendWebhook(url, message);
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ rate limit (error 429) ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        if (retryAfter) {
            console.log(`‚è≥ Retrying after ${retryAfter / 1000} seconds...`);
            await delay(retryAfter); // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Discord ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        } else {
            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 0.75 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (750ms) ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            await delay(750);
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
function logToQueue(urlType, message) {
    queue[urlType].push(message);
    if (!isProcessing) {
        isProcessing = true;
        processQueue(urlType).finally(() => {
            isProcessing = false;
        });
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Discord ‡∏î‡πâ‡∏ß‡∏¢ Embed
function logSystemToDiscord(type, title, message) {
    const colorMap = {
        success: 0x2ecc71,
        info: 0x3498db,
        error: 0xe74c3c
    };

    const safeTitle = (title || '').slice(0, MAX_TITLE_LENGTH);
    const safeMessage = (message || '').slice(0, MAX_DESCRIPTION_LENGTH);
    const safeFooterText = 'Express.js Logger'.slice(0, MAX_FOOTER_LENGTH);

    const embed = {
        title: safeTitle,
        description: safeMessage,
        color: colorMap[type] || 0x95a5a6,
        timestamp: new Date().toISOString(),
        footer: {
            text: safeFooterText
        }
    };

    const SENDING_URL = type === 'error' ? DISCORD_ERROR_WEBHOOK_URL : DISCORD_INFO_WEBHOOK_URL;
    logToQueue(type, JSON.stringify({ embeds: [embed] }));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡πà‡∏á log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
function logCourseToDiscord(title, message) {
    const embed = {
        title: title.slice(0, MAX_TITLE_LENGTH),
        description: message.slice(0, MAX_DESCRIPTION_LENGTH),
        color: 0x3498db,
        timestamp: new Date().toISOString(),
        footer: {
            text: 'Express.js Logger'
        }
    };
    logToQueue('course', JSON.stringify({ embeds: [embed] }));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord channel
function logBookingToDiscord(message) {
    logToQueue('booking', message);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
async function sendNotification(jsonData) {
    try {
        logBookingToDiscord(jsonData.message);
        console.log('üì¢ Notification Sent Successfully');
    } catch (error) {
        console.error('‚ùå Error sending notification:', error.stack);
        throw error;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
async function sendNotificationUpdate(jsonData) {
    try {
        logBookingToDiscord(jsonData.message);
        console.log('üì¢ Notification Sent Successfully');
    } catch (error) {
        console.error('‚ùå Error sending update notification:', error.stack);
        throw error;
    }
}

module.exports = {
    logSystemToDiscord,
    logBookingToDiscord,
    sendNotification,
    sendNotificationUpdate,
    logCourseToDiscord
};
